"use client";

import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from '@/components/ui/button';
import { DatePickerWithRange } from '@/components/ui/date-range-picker';
import { ResponsiveContainer, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ComposedChart, Line } from 'recharts';
import type { DateRange } from 'react-day-picker';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { subDays, format, getISOWeek } from 'date-fns';
import { Badge } from '@/components/ui/badge';
import { useToast } from "@/hooks/use-toast";
import { createClient } from '@/lib/supabase/client';
import { Skeleton } from "@/components/ui/skeleton";

interface Gear {
  id: string;
  name: string;
  full_name: string;
}

interface GearRequest {
  gear_ids: string[];
  gears: Gear[];
}

interface PopularGear {
  name: string;
  count: number;
  fullName: string;
}

interface PopularGearResult {
  gear_id: string;
  name: string;
  full_name: string;
  request_count: number;
}

interface WeeklyTrend {
  week: string;
  weekLabel: string;
  requests: number;
  damages: number;
}

interface AnalyticsData {
  totalRequests: number;
  totalDamageReports: number;
  popularGears: Array<PopularGear>;
  weeklyTrends: Array<WeeklyTrend>;
}

interface RequestData {
  created_at: string;
}

export default function ReportsPage() {
  const [dateRange, setDateRange] = useState<DateRange | undefined>({
    from: subDays(new Date(), 30),
    to: new Date()
  });
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [analytics, setAnalytics] = useState<AnalyticsData>({
    totalRequests: 0,
    totalDamageReports: 0,
    popularGears: [],
    weeklyTrends: []
  });
  const { toast } = useToast();
  const supabase = createClient();

  async function fetchPopularGears(): Promise<PopularGear[]> {
    try {
      if (!dateRange?.from || !dateRange?.to) {
        throw new Error('Invalid date range');
      }

      // First try using the RPC function
      const { data: rpcData, error: rpcError } = await supabase
        .rpc('get_popular_gears', {
          start_date: dateRange.from.toISOString(),
          end_date: dateRange.to.toISOString()
        });

      if (!rpcError && Array.isArray(rpcData)) {
        return rpcData.map(item => ({
          name: item.name || 'Unknown Gear',
          fullName: item.full_name || 'Unknown Gear',
          count: Number(item.request_count) || 0
        }));
      }

      // If RPC fails, try the direct query with the computed gears relationship
      console.warn('RPC method failed, trying direct query:', rpcError);
      
      const { data: requestData, error: queryError } = await supabase
        .from('gear_requests')
        .select(`
          id,
          gears (
            id,
            name,
            full_name
          )
        `)
        .gte('created_at', dateRange.from.toISOString())
        .lte('created_at', dateRange.to.toISOString());

      if (queryError) {
        throw queryError;
      }

      if (!Array.isArray(requestData)) {
        throw new Error('Invalid response format');
      }

      // Process and aggregate the gear usage data
      const gearUsage = new Map<string, { name: string; fullName: string; count: number }>();
      
      requestData.forEach(request => {
        if (request.gears) {
          request.gears.forEach((gear: Gear) => {
            const key = gear.id;
            const existing = gearUsage.get(key) || { name: gear.name, fullName: gear.full_name || gear.name, count: 0 };
            gearUsage.set(key, { ...existing, count: existing.count + 1 });
          });
        }
      });

      return Array.from(gearUsage.values())
        .sort((a, b) => b.count - a.count)
        .map(item => ({
          name: item.name,
          fullName: item.fullName,
          count: item.count
        }));

    } catch (error) {
      console.error('Error fetching popular gears:', error);
      throw error;
    }
  }

  // Add weekly trends fetching logic
  async function fetchWeeklyTrends(): Promise<WeeklyTrend[]> {
    try {
      const { data: trendsData, error } = await supabase
        .from('gear_requests')
        .select('created_at')
        .gte('created_at', dateRange?.from?.toISOString() || '')
        .lte('created_at', dateRange?.to?.toISOString() || '');

      if (error) throw error;

      const weeklyData: Record<string, { requests: number; damages: number }> = {};

      trendsData?.forEach((request: RequestData) => {
        const date = new Date(request.created_at);
        const weekKey = `${format(date, 'yyyy')}-${getISOWeek(date)}`;
        if (!weeklyData[weekKey]) {
          weeklyData[weekKey] = { requests: 0, damages: 0 };
        }
        weeklyData[weekKey].requests++;
      });

      return Object.entries(weeklyData)
        .sort(([a], [b]) => a.localeCompare(b))
        .map(([week, data]) => ({
          week,
          weekLabel: `Week ${week.split('-')[1]}`,
          requests: data.requests,
          damages: data.damages
        }));
    } catch (err) {
      console.error('Error fetching weekly trends:', err);
      return [];
    }
  }

  const fetchData = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const [popularGears, weeklyTrends] = await Promise.all([
        fetchPopularGears(),
        fetchWeeklyTrends()
      ]);

      setAnalytics(prev => ({
        ...prev,
        popularGears,
        weeklyTrends
      }));
    } catch (err) {
      setError('Failed to load analytics data');
      console.error('Error loading analytics:', err);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, [dateRange]);

  // Add a subscription for real-time updates
  useEffect(() => {
    const channel = supabase.channel('reports-changes')
      .on('postgres_changes', {
        event: '*',
        schema: 'public',
        table: 'gear_requests'
      }, () => {
        fetchData();
      })
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="space-y-6 container mx-auto py-8"
    >
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <h1 className="text-3xl font-bold">Analytics & Reports</h1>
        <div className="flex items-center gap-2">
          <DatePickerWithRange 
            dateRange={dateRange}
            onDateRangeChange={setDateRange}
          />
          <Button
            variant="outline"
            onClick={fetchData}
            disabled={isLoading}
          >
            Refresh
          </Button>
        </div>
      </div>

      {error ? (
        <Card className="bg-destructive/10 border-destructive">
          <CardHeader>
            <CardTitle className="text-destructive">Error</CardTitle>
            <CardDescription>{error}</CardDescription>
          </CardHeader>
        </Card>
      ) : isLoading ? (
        <div className="space-y-4">
          <Skeleton className="h-[200px] w-full" />
          <Skeleton className="h-[300px] w-full" />
          <Skeleton className="h-[200px] w-full" />
        </div>
      ) : (
        <div className="grid gap-6">
          {/* Popular Gears Card */}
          <Card>
            <CardHeader>
              <CardTitle>Most Requested Gear</CardTitle>
              <CardDescription>Top 5 most frequently requested items</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Gear Name</TableHead>
                    <TableHead className="text-right">Request Count</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {analytics.popularGears.map((gear, index) => (
                    <TableRow key={index}>
                      <TableCell>{gear.name}</TableCell>
                      <TableCell className="text-right">
                        <Badge variant="secondary">{gear.count}</Badge>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>

          {/* Weekly Trends Chart */}
          <Card>
            <CardHeader>
              <CardTitle>Weekly Activity</CardTitle>
              <CardDescription>Request and maintenance trends over time</CardDescription>
            </CardHeader>
            <CardContent className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <ComposedChart data={analytics.weeklyTrends}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="weekLabel" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="requests" fill="#3b82f6" name="Requests" />
                  <Line type="monotone" dataKey="damages" stroke="#ef4444" name="Damages" />
                </ComposedChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </div>
      )}
    </motion.div>
  );
}
